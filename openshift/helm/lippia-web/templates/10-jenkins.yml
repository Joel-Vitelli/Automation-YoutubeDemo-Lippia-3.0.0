apiVersion: v1
kind: DeploymentConfig
metadata:
  creationTimestamp: null
  generation: 1
  name: {{ .Release.Name }}-jenkins
  namespace: {{ .Release.Namespace }}
spec:
  minReadySeconds: 60
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    name: {{ .Release.Name }}-jenkins
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: {{ .Release.Name }}-jenkins
    spec:
      containers:
      - name: {{ .Release.Name }}-jenkins
        image: crowdar/jenkinsbo:demoweb
        imagePullPolicy: Always
        env:   
        - name: JENKINS_HOME
          value: /var/jenkins_home
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        - containerPort: 50000
          protocol: TCP
        resources:
          limits:
            memory: 2Gi
          requests:
            memory: 1Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/jenkins_home
          name: vol-docker
          subPath: ./docker/jenkins_home
      - name: {{ .Release.Name }}-nginx
        image: nginx:stable
        imagePullPolicy: Always
        env:
        - name: TZ
          value: America/Argentina/Buenos_Aires   
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 512Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: vol-docker
          subPath: ./docker/jenkins_home/reportsVolume
        - mountPath: /etc/nginx/nginx.conf
          name: vol-docker
          subPath: ./docker/nginx/nginx.conf
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: sa-{{ .Release.Name }}
      serviceAccountName: sa-{{ .Release.Name }}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vol-docker
        emptyDir: {}
      initContainers:
      - command:
        - sh
        - -c
        - |
          git clone https://bitbucket.org/crowdarautomation/lippia-web-sample-project.git /vol_docker;
          chown 1000:1000 -R /vol_docker
        image: alpine/git
        imagePullPolicy: Always
        name: clone-repo
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /vol_docker
          name: vol-docker 
  test: false
  triggers:
  - type: ConfigChange
---  
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    name: {{ .Release.Name }}-jenkins
  name: {{ .Release.Name }}-jenkins
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: "tcp-8080"
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: "tcp-50000"
    port: 50000
    protocol: TCP
    targetPort: 50000
  selector:
    name: {{ .Release.Name }}-jenkins
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Route
metadata:
  annotations:
    openshift.io/host.generated: "true"
  creationTimestamp: null
  labels:
    name: {{ .Release.Name }}-jenkins
  name: {{ .Release.Name }}-jenkins
  namespace: {{ .Release.Namespace }}
spec:
  port:
    targetPort: "tcp-8080"
  to:
    kind: Service
    name: {{ .Release.Name }}-jenkins
    weight: 100
  wildcardPolicy: None
---  
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    name: {{ .Release.Name }}-nginx
  name: {{ .Release.Name }}-nginx
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: "tcp-80"
    port: 8081
    protocol: TCP
    targetPort: 80
  selector:
    name: {{ .Release.Name }}-jenkins
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Route
metadata:
  annotations:
    openshift.io/host.generated: "true"
  creationTimestamp: null
  labels:
    name: {{ .Release.Name }}-nginx
  name: {{ .Release.Name }}-nginx
  namespace: {{ .Release.Namespace }}
spec:
  port:
    targetPort: "tcp-80"
  to:
    kind: Service
    name: {{ .Release.Name }}-nginx
    weight: 100
  wildcardPolicy: None